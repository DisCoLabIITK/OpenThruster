% ----------------------------------------------------------------------- %
%                                                                         %
%                              0111000                                    %
%                           100 1 100 001                                 %
%                         10    1  1  1 00                                %
%                        01  1  1  1      0                               %
%                       0 1  1  1   1  1 1 0                              %
%                       0   1   1   1  1  1 0                             %
%                       0 1     1   1  1  1 0                             %
%                       0 1  1  1   1  0  1 0                             %
%                       0 1  1  1   0  1    0                             %
%                       01 1        1  1 1 0                              %
%                        0    0  1  0 1   0                               %
%                         0         1    0                                %
%                    10010 0 1101111110111                                %
%                  10 1 1  1111111111 11 11                               %
%                 0 1 1 1 11111111101011010111                            %
%                01 11    11111111 1  1    1 110                          %
%               011    1 1 111111110011  1 1 1 110                        %
%               0   11 1 1 1 111      0  1 1 1   10                       %
%               0 1   11  1  0         1 1 1 1 1 1 0                      %
%               1  11 1 1   11          0  1 1 1 1 11                     %
%                0     1 1  0           011  1 1 1 10                     %
%                10 1   1  0             0  1 1 1  11                     %
%                 10     01               01      10                      %
%                   10001                   001 100                       %
%                                             111                         %
%                                                                         %
%             ____                   _____                                %
%            / __ \                 |  __ \                               %
%           | |  | |_ __   ___ _ __ | |__) | __ ___  _ __                 %
%           | |  | | '_ \ / _ \ '_ \|  ___/ '__/ _ \| '_ \                %
%           | |__| | |_) |  __/ | | | |   | | | (_) | |_) |               %
%            \____/| .__/ \___|_| |_|_|   |_|  \___/| .__/                %
%                  | |                              | |                   %
%                  |_|                              |_|                   %
%                                                                         %
%             An integrated rotor design and analysis tool.               %
%                                                                         %
%                                                                         %
% Copyright (C) 2011, Brenden Epps.                                       %
%                                                                         %
% This program is free software; you can redistribute it and/or modify it %
% under the terms of the GNU General Public License as published by the   %
% Free Software Foundation.                                               %
%                                                                         %
% This program is distributed in the hope that it will be useful, but     %
% WITHOUT ANY WARRANTY; without even the implied warranty of              %
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    %
% See the GNU General Public License for more details.                    %
%                                                                         %
% ----------------------------------------------------------------------- %

% -------------------------------------------------------------------------
% This function returns lifting surface geometry corrections:
% -------------------------------------------------------------------------

function [K1K2] = EckhardtMorgan1955(EAR,RC,TANBIC)

LI = RC.*TANBIC;

% Do not extrapolate in EAR
if     EAR < 0.4
   EAR = 0.4;
elseif EAR > 1.2;
   EAR = 1.2;
end

% Do not extrapolate in LI: [0.4 , 2.0]
LI(LI < 0.2) = 0.2;
LI(LI > 0.6) = 0.6;

% ------------------------- Load data from Eckhardt and Morgan (1955) paper
% load Eckhardt1955
EAERL = [
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000];

EAERR = [
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000
    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000];

ELI = [
    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000
    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000
    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000
    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000
    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000];

ERC = [
    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000
    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000    0.3000
    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000    0.4000
    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000    0.5000
    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000
    0.7000    0.7000    0.7000    0.7000    0.7000    0.7000    0.7000    0.7000    0.7000
    0.8000    0.8000    0.8000    0.8000    0.8000    0.8000    0.8000    0.8000    0.8000
    0.9000    0.9000    0.9000    0.9000    0.9000    0.9000    0.9000    0.9000    0.9000
    0.9500    0.9500    0.9500    0.9500    0.9500    0.9500    0.9500    0.9500    0.9500];

EK1 = [
    0.8613    0.8601    0.8532    0.8413    0.8250    0.8048    0.7815    0.7555    0.7275
    0.9394    0.9378    0.9355    0.9320    0.9270    0.9198    0.9099    0.8970    0.8805
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0496    1.0528    1.0555    1.0584    1.0623    1.0677    1.0756    1.0865    1.1012
    1.0890    1.0911    1.0950    1.1014    1.1106    1.1231    1.1393    1.1597    1.1847];

EK2 = [
    1.0024    0.9991    1.0019    0.9991    0.9981    1.0164    1.0734    1.1834    1.3490
    1.1223    1.1208    1.1316    1.1510    1.1811    1.2289    1.3074    1.4346    1.6342
    1.3046    1.3094    1.3330    1.3705    1.4217    1.4911    1.5879    1.7261    1.9240
    1.4905    1.5127    1.5464    1.5914    1.6513    1.7331    1.8477    2.0093    2.2361
    1.6753    1.7035    1.7519    1.8146    1.8924    1.9930    2.1308    2.3266    2.6085
    1.7843    1.8412    1.9044    1.9861    2.0975    2.2491    2.4505    2.7107    3.0376
    1.7947    1.8736    1.9764    2.1051    2.2669    2.4737    2.7425    3.0954    3.5592
    1.8086    1.8681    1.9989    2.1637    2.3536    2.5880    2.9146    3.4094    4.1768
    1.7912    1.8781    2.0037    2.1848    2.4084    2.6694    3.0065    3.5400    4.5083];
% -------------------------------------------------------------------------    
    

% ---- Look up K1 and K2
K1 = interp2(EAERL,ELI,EK1,EAR,LI);
K2 = interp2(EAERR,ERC,EK2,EAR,RC);

% for i = 1:length(RC)
%     if isnan(K2(i))
%         K2(i) = interp1(RC(1:i-1),K2(1:i-1),RC(i),'pchip','extrap');
%     end
% end



% RC
% K2
% RC(~isnan(K2)),K2(~isnan(K2))


K2 = interp1(RC(~isnan(K2)),K2(~isnan(K2)),RC','pchip','extrap');

K1K2 = (K1.*K2)';
